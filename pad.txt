The goal of this fork is to have one clean complete battery-included 
github-enabled ocsigen repository. 

I've copied the original ocsigen darcs repo, then 'darcs mv' files and
directories around, then created a git repo on top of this darcs repo
and added external/ stuff. I've also moved js_of_ocaml/ and oclosure/
under web_js/, lwt and deriving in external/, and macaque/ and pgocaml/
under database/. I've also moved what appear to be dead docs/old (e.g.
ocamlbuild stuff).

New compilation procedure:
  - install libev C library, openssl C library, pcre C library, the 
    postgres C library and postgres server.
  - compile and 'make install' ocaml libraries in external/:
    react, ssl, lwt (with ./configure  --enable-react --enable-ssl),
    pcre, ocamlnet, cryptokit, ocaml-text, calendar,
    csv, extlib,
    and deriving.
  - compile and 'make install' js_of_ocaml and oclosure
  - compile and 'make install' pgocaml and macaque
  - => can now './configure' ocsigen and compiles it
    make depend
    make
    ./server/ocsigen -c pad.conf.local
    open http://<server_machine>:8080/miniwiki in your browser
     (where <server_machine> is usually localhost, unless you
     run the server on one machine and browse the web from another)
  - a small demo is in demos/hello. Just do 'make depend; make; make run'

TODO see install_dependencies.sh

for postgres after the install of the postgres server you need to:
 sudo mkdir -p /opt/local/var/db/postgresql81/defaultdb
 sudo chown postgres81:postgres /opt/local/var/db/postgresql81/defaultdb
 sudo su postgres81 -c '/opt/local/lib/postgresql81/bin/initdb -D /opt/local/var/db/postgresql81/defaultdb'
 sudo -u postgres81 /opt/local/lib/postgresql81/bin/postmaster -D /opt/local/var/db/postgresql81/defaultdb
 sudo -u postgres81 /opt/local/lib/postgresql81/bin/createdb `whoami`
 sudo -u postgres81 /opt/local/lib/postgresql81/bin/createuser `whoami`
then each time you reboot:
 sudo -u postgres81 /opt/local/lib/postgresql81/bin/postmaster -D /opt/local/var/db/postgresql81/defaultdb

ocsigen is quite flexible in the choice of its subcomponents:
 - for html: raw string, xHTML, xHTML with camlp4 extension, ocamlduce
 - for db: ocsipersist dbm, ocsipersist sqlite, macaque ?
 - for js: manual?, obrowser (but dead?), js_of_ocaml/, js_of_ocaml + oclosure

--------------------------------------------
Code organization
--------------------------------------------

Are web_js/ web_css/ web_html/ good names ? ocsigen tries
to abstract away from this ugliness so perhaps we should call it
client_side/, server_side/ ? But ocsigen also wants to blur
the distinction between client_side and server_side so actually
better to have eliom/ single dir and support libraries like web_js/, web_html/
for the ugly stuff.

Should we move xmlp4 (web_html/) in external/ ? No because html/xml are
fundemental to web apps. Lwt is not, hence the move to external/.
Same for deriving.

--------------------------------------------
Misc notes
--------------------------------------------

Need absolute path in the ocsigen conf file, otherwise can't
file static files apparently ... (maybe because of security check ?)

--------------------------------------------
Original compilation procedure:
--------------------------------------------

To compile ocsigen, first install ocaml 3.12 and findlib. Then:

--------------------------------------------
Install for LWT and JS
--------------------------------------------

cd lwt/
 configure
 (need install libev C library, in /usr/local)
 make
 make install
 UPDATE: to get lwt for ocsigen you'll also need react and ssl, see below)

cd js_of_ocaml/
 need lwt
 make
 make install

cd oclosure/
 need js_of_ocaml, obviously
 DON't DO make depend!
 make (quite long)
 make install 

=> CAN PLAY WITH CLIENT-SIDE PROGRAMMING.

--------------------------------------------
Install for Ocsigen and ocsimore
--------------------------------------------

install react:
 need react-0.9.2, chmod a+x build
 ./build
 ./build install
 and then mv /.../lib/ocaml/react/ to .../lib/ocaml/site-lib/react
 so ocamlfind (and ocsigen/lwt) can find it.
 UPDATE: actually moving stuff is not enough. 'ocamlfind list' does not list it
 Have to call ocamlfind manually
 cd react-0.9.2/_build/src; cp ../../src/META .
 UPDATE: edit the META file and remove the +directory line (otherwise 
 it confuses ocamlfind)
 /opt/local/bin/ocamlfind install  react META react.ml* react.cm* react.o

install ocamlssl:
 (need install openssl C library)
 grab ocamlssl 0.4.4 source from debian ftp
 configure
 make
 make install

recompile lwt with react/openssl support
 ./configure  --enable-react --enable-ssl
 rm the old lwt in .../lib/ocaml/site-lib
 make install

install pcre:
 (need install pcre C library first)

install ocamlnet:
 (need install ocamlpcre first )
 configure
 make all
 make opt (otherwise the compilation of ocsigen will fail at some point)
 make install

install cryptokit: 
 configure
 make install

install ocaml-text: 
 configure
 make install

install ocaml-calendar: 
 configure
 make install

=> can now have a configure in ocsigen/ that finish without an error!

cd ocsigen/
 configure
 (need install react, ssl (and recompile lwt), ocamlnet (and pcre), cryptokit,
  ocaml-text
 )
 make depend
 make

$ ./server/ocsigen -c ocsigen.conf.local
(but originally fails because of sqlite, have to tweak ocsigen.conf.local
to uncomment the line talking about ocsipersist-dbm and comment
the lines for sqlite.)

open http://localhost:8080/miniwiki in your browser

=> yeah :) (one day to compile from source ocsigen, hmmm)

=> CAN PLAY WITH SERVER-SIDE PROGRAMMING

--------------------------------------------
Code organisation of ocsigen/
--------------------------------------------

Makefile
Makefile.config (generated by configure)
...
baselib/
 with dynling_wrapper.ml, ocsigen_config.ml, etc
deriving/ 
 TODO should be in commons/ or external/
docs/ (was doc/)
 tutorial/ (was ../tutorial)
  with many .eliom and .conf, and many versions (v1/, v2/, ...)
xmlp4/
 alternatives to ocamlduce, xHTML.ml and co
eliom/
 lots of .ml, and client/eliom_client.js!
extensions/ with many symlinks to other dirs 
 ../deriving/tmp/deriving,  
 ../baselib/[donot]parsecmdline.cma,
 ../xmlp4/xhtml.cma, xmlpretty.cma and xmlsyntax.cma
 ../eliom/eliom.cma and eliom_client.cma and eliom_client_main.cmo,  
 ../server/ocsigen.cma
files/ 
 META and references to files/ocsigen -> ../extensions.
  they abuse ocamlfind and findlib to configure ocsigen and specify
  where to find the packages to load (probably leverage dynlink)
 META.eliom_tests
http/
 with http_lexer.mll
server/
 ocsigen and ocsigen.opt !! the binaries !!
 ocsigen.cma (linked from ../extensions)
 server_main.ml
pad.conf.local (was ocsigen.conf.local, generated by make)
 mentions of var/log, var/lib
 mentions findlib-path ".../ocsigen/files/" and its META file, 
 findlib-package extensions (ocsigen.ext.staticmod, ocsigen.ext.eliom, ...)
 findlib-package elioms (eliom_tests.miniwiki, eliom_tests.testsuite)
  and their configuration files (static dir = ...)
etc/ ?
pages/ ??
var/
tmp/
 pad stuff

eliom code splitted in baselib/, eliom/, extensions/, xmlp4/
and server code splitted in http/, server/

--------------------------------------------
Misc
--------------------------------------------

note that some of the ocsigen components use ocamlbuild, some use plain
Makefile. Some use ocamlfind, some don't ...

see also web-development.org#ocsigen
