=Server side state of an Eliom application=

The server-side state of an application refers to data stored on server
side for all users, or for a limited //scope//:
* session,
* group of sessions (for example all sessions of the same user),
* or client-side process.

Saving server-side data is done by using what we call //Eliom references//
(or eref, see below).

The server-side state may also contains //services// registered for a
limited scope.

States disappear either when it is discarded explicitely (session closing for
example), or by a timeout.
\\

In the current implementation, because of some limitation in OCaml's
serialization mechanism, there are three kinds of states (for each scope):
* volatile data states,
* volatile service states,
* persistent data states.

Volatile states will not survive after relaunching the server.
There is no persistent service state. Be very careful if you use both persistent
state data and service state,
as your session may become inconsistent (use service states
only for volatile services, like coservices with timeouts).

We hope to simplify this when OCaml's serialization mechanism evolves.
In the meantime, be very careful where you store your data.
To avoid shutting down the server, note that it is possible
to ask the server to load dynamically new versions of your site
(see command {{{reload}}} in chapter * *).\\

On a technical point of view, sessions and groups of sessions are
implemented automatically by Eliom by asking the browser to send
a session identifier in a cookie.
Client-side processes also send an identifier in each request,
using some kind of "client-side process-cookie".\\

States can be secure or not. Secure means that the state data or service
will be associated to a secure cookie, that is a cookie that is sent
by the browser only if the protocol is HTTPS. Use secure states to access
confidential data, that you do not want to send through HTTP.

It is possible to give a name to a state if you want several states
for the same application (advanced use). Each state name uses
its own cookies and you can discard data for one state name only.


==Eliom references==

===Principles
//Eliom references// (//erefs//) are some kind of
references with (possibly) a limited scope.
You define the reference with an initial value and a scope
(global, group of sessions, session, client process, or current request
processing). The default is global scope.
When you change the value, it actually changes only for the scope
you specified.

Eliom references can be persistent or not (that is: can survive after
relaunching the server or not).

Eliom references are used for example:
* to store session data, server side data for a client process,
or user data (scope: session, client process, session group),
* or to keep some information about the current request (scope: request),
for example to give information to the service taking in charge the request
after an action,
* to implement persistent references (scope: global).

Non persistent global Eliom references are equivalent to regular OCaml
references.

===API

Eliom references are created using the function {{{Eliom_references.eref}}},
that works like the usual Ocaml {{{ref}}} function, but with several
additional optional parameters that will be explained below.
The interface of the {{{Eliom_references}}} module also defines
{{{get}}}, {{{set}}} and {{{unset}}}, to get the value, set the value,
and turn back to the default value.

Here is the interface of {{{Eliom_references}}}:
<<code language="ocaml"|type 'a eref

val eref :
  ?state_name:string ->
  ?scope:[ `Request | `Client_process | `Session | `Session_group | `Global ] ->
  ?secure:bool ->
  ?persistent:string ->
  'a -> 'a eref

val get : 'a eref -> 'a Lwt.t

val set : 'a eref -> 'a -> unit Lwt.t

val unset : 'a eref -> unit Lwt.t
>>


===Persistent references

Persistent references are implemented using the module {{{Ocsipersist}}}
for which Ocsigen provides two implementation, one based on
{{{SQLite}}}, the other one based on {{{DBM}}}.

Persistent references are created by adding the {{{~persistent}}}
parameter to the {{{Eliom_references.eref}}} function.
The value of this parameter is the name of the reference in the database.

Note that persistent data are serialized on hard drive using
OCaml's unsafe <<span class="code"|Marshal>> module:
<<div class="importantwarning"|
*It is not possible to serialize closures or services
 (as we are using dynamic linking),
* If you ever change the type of serialised data, don't
 forget to change the persistent reference name, or the server will
 probably crash while deserializing!
>>

===@@id="perscount"@@ Example: persistent counter

The following piece of code defines a persistent counter of visits:
<<code language="ocaml"|open Lwt
open HTML5.M
open Eliom_parameters

let myeref = Eliom_references.eref ~persistent:"perscount" 0

let count3 =
  let next =
    let mutex = Lwt_mutex.create () in
    (fun () ->
      Lwt_mutex.lock mutex ~>>= fun () ->
      Eliom_references.get myeref ~>>= fun oldc ->
      let newc = oldc + 1 in
      Eliom_references.set myeref newc ~>>= fun () ->
      Lwt_mutex.unlock mutex;
      Lwt.return newc)
  in
  Eliom_output.Html5.register_service
    ~path:["perscount"]
    ~get_params:unit
    (fun () () ->
      next () ~>>=
      (fun n ->
        Lwt.return
         (html
          (head (title (pcdata "counter")) [])
          (body [p [pcdata (string_of_int n)]]))))
>>

As you see, we need to use a mutex, because reading or writing in the
database introduces a Lwt cooperation point.

[[site:tuto/perscount| See this example here]].\\

To implement a counter of visits for each user (each browser),
just add the parameter {{{~scope:`Session}}} to the {{{eref}}} function call.

===Example: connection of users===

The following example is a Web site with a connection box,
that can be easily placed on each page of the site, thanks to actions
an non-attached services.

It uses an Eliom reference (scope session)
to record the user name (once the user is connected).
It also uses an Eliom reference (scope request) to transmit the "bad user"
information from the action to the service displaying the page.

The session is kept in memory, but if you want it to be persistent,
just add the {{{~persistent}}} parameter while creating the session Eliom
reference.

Later in this chapter, we will give a better version of this example
using session groups and redirections.

<<code language="ocaml"|(************************************************************)
(****************** Connection of users *********************)
(************************************************************)
open Lwt
open Eliom_parameters
open HTML5.M

(*zap* *)
let state_name = "connect_example_state"
(* *zap*)
(* -------------------------------------------------------- *)
(* We create one main service and two (POST) actions        *)
(* (for connection and disconnection)                       *)

let connect_example =
  Eliom_services.service
    ~path:["connect_example"]
    ~get_params:unit
    ()

let connect_action =
  Eliom_services.post_coservice'
    ~name:"connection"
    ~post_params:(string "login")
    ()

(* disconnect action and box:                               *)
let disconnect_action =
  Eliom_output.Action.register_post_coservice'
    ~name:"disconnection"
    ~post_params:Eliom_parameters.unit
    (fun () () ->
      Eliom_state.close_session (*zap* *) ~state_name (* *zap*) ())

let disconnect_box s =
  Eliom_output.Html5.post_form disconnect_action
    (fun _ -> [p [Eliom_output.Html5.string_input
                    ~input_type:`Submit ~value:s ()]]) ()

(* State: *)
(* The following eref is true if the connection has action failed: *)
let bad_user = Eliom_references.eref (*zap* *) ~state_name (* *zap*) ~scope:`Request false

(* The following eref is the name of the user, when connected *)
let user = Eliom_references.eref (*zap* *) ~state_name (* *zap*) ~scope:`Session None

(* -------------------------------------------------------- *)
(* new login box:                                           *)

let login_box session_expired bad_u action =
  Eliom_output.Html5.post_form action
    (fun loginname ->
      let l =
        [pcdata "login: ";
         Eliom_output.Html5.string_input ~input_type:`Text ~name:loginname ()]
      in
      [p (if bad_u
        then (pcdata "Wrong user")::(br ())::l
        else
          if session_expired
          then (pcdata "Session expired")::(br ())::l
          else l)
      ])
    ()

(* -------------------------------------------------------- *)
(* Handler for the "connect_example" service (main page):   *)

let connect_example_handler () () =
  (* The following function tests whether the session has expired: *)
  let status = Eliom_state.volatile_data_state_status (*zap* *) ~state_name (* *zap*) ()
  in
  Eliom_references.get bad_user ~>>= fun bad_u ->
  Eliom_references.get user ~>>= fun u ->
  Lwt.return
    (html
       (head (title (pcdata "")) [])
       (body
          (match u, status with
            | Some name, _ ->
              [p [pcdata ("Hello "^name); br ()];
               disconnect_box "Close session"]
            | None, Eliom_state.Expired_state ->
              [login_box true bad_u connect_action;
               p [em [pcdata "The only user is 'toto'."]]]
            | _ ->
              [login_box false bad_u connect_action;
               p [em [pcdata "The only user is 'toto'."]]]
          )))

(* -------------------------------------------------------- *)
(* Handler for connect_action (user logs in):               *)

let connect_action_handler () login =
  Eliom_state.close_session (*zap* *) ~state_name (* *zap*) () ~>>= fun () ->
  if login = "toto" (* Check user and password :-) *)
  then Eliom_references.set user (Some login)
  else Eliom_references.set bad_user true


(* -------------------------------------------------------- *)
(* Registration of main services:                           *)

let () =
  Eliom_output.Html5.register ~service:connect_example connect_example_handler;
  Eliom_output.Action.register ~service:connect_action connect_action_handler
>>

==Additional features

===Scope of services

It is also possible to set a scope for services.
Either you want a (co)-service to be visible only for one user (or one
client-side process, or one session), or you want to define specialized
version of some global services. If you register several time a
service with several scopes, Eliom will try the service in increasing scope
order (that is, first the client process service if any, then session, then
session group, then global).

To limite the scope of a service, just add the argument
{{{~scope}}} to the 
<<span class="Cem"|<<span class="code"|register>>>> function
(values : {{{`Client_process}}}, {{{`Session}}}, {{{`Session_group}}},
 or {{{`Global}}} (default)).
\\

<<div class="wip"|
<<code language="ocaml"|(*zap* *)
let () = set_global_volatile_state_timeout (Some 600.)
let () = set_global_persistent_data_state_timeout (Some 3600.)
(* *zap*)
>>
>>


===Secure states

For security reasons, Eliom does not use the same cookies in
https and http. Secure sessions are using secure cookies
(i.e. Ocsigen server will ask the browsers to send the cookie only if
the protocol is HTTPS). Thus it is not possible to access
secure session if the user is using http. If the user is using
https, Eliom will save data and services in secure session. But
it is possible to access unsecure session data and to register
unsecure session services using the optional parameter
<<span class="code"|~secure:false>> when calling functions like
<<span class="code"|Eliom_references.eref>>,
<<span class="code"|Eliom_output.Html5.register>>, etc.


===Discarding states (and closing sessions)

To discard a state, use {{{Eliom_states.discard_state}}}.
It will remove all server-side services and data (persistent or not)
for the given scope.
Used with {{{~scope:`Session}}}, this will close a session
(a synonymous is {{{Eliom_states.close_session}}}, that does exactly the same).

Closing a group of sessions will close all sessions in the group.

By default discarding a state will remove both secure and unsecure data
and services, but if the parameter [~secure] is present.\\

Warnings:
* It is a good idea to close the session when a user tries to connect,
even if it is already connected (as in the connection example above),
* You may also want to unset some request-scoped Eliom references
when discarding a state,
* If your state data contains opened file descriptors,
they won't be closed by OCaml's garbage collector. Close it yourself!
(for example using <<span class="code"|Gc.finalise>>).\\

It is also possible to discard selectively only services, persistent data
or volatile data (see Eliom_states' interface). But this may be periculous.
Be very careful when doing this, as you are desynchronizing the three kinds
of sessions.\\





===State names

By default, Eliom is using three cookies for sessions (and session groups):
*One for session services,
*one for volatile session data,
*one for persistent session data.

For client side process, it uses the same three kinds of client side process
cookies.\\

If you need more sessions (for example several different data sessions)
for the same site, you can give a name to your sessions by giving
the optional parameter <<span class="code"|?state_name>> to functions like
<<span class="Cem"| <<a_api| val Eliom_state.close_data_session >>>>,
<<span class="Cem"| <<a_api| val Eliom_output.Html5.register >>>>, or
 <<a_api| val Eliom_state.get_volatile_data >>.
Note that the online tutorial has been implemented using this feature,
even if it has been hidden for the sake of simplicity.
That's how the different examples of sessions in the tutorial are
independant.


===Session groups

The idea is complementary to that of
the "state name".  While the
optional <<span class="code"|state_name>> parameter allows for a single
session to have multiple buckets of data associated with it, a session group
(also optional) allows multiple sessions to be referenced together.

For most uses, the session group is the user name.
It is a good idea to group together all the opened sessions for a same user
(if he is using several browsers).\\

**The use of session groups is highly encouraged!**, because:
* //The number of sessions in a group is limited.//
If all sessions are in a group you will avoid some malicious user
to open too many sessions.
If you do not use session groups,
the number of sessions is limitated by IP address,
which can be a problem for example if the server is behind
a reverse proxy or if many user are using the same NAT.
* It allows to implement features like "close all sessions" for one user
(even those opened on other browsers).
Consider the following scenario: a user logs in from home using
a "Remember me on this computer" feature, which sets a (almost)
no-expiration cookie on his browser and session timeouts of infinity
on the server.  The user goes on vacation, and while logging from
a cyber-café, she also sets the "Remember me" option.  Back home
she realises her mistake, and wishes to do a "global logout", ie,
closing all existing sessions associated with her user name.\\

It is highly recommended to set a group for each of the three kinds of states
you use (services, volatile data and persistent data).\\


We rewrite the example of section * * with session groups.
We also make some additional changes:
* We use persistent sessions
* We use a redirection instead of an action in case the connection succeeded,
so that the browser does not try to repost the connection data if the user
press the "reload" button. The redirection goes towards
{{{Eliom_services.void_hidden_coservice'}}}, that is: service corresponding
to current URL.

<<code language="ocaml"|
(************************************************************)
(********* Connection of users with session groups **********)
(************************************************************)
(*zap* *)
let state_name = "session_group_example_state"
(* *zap*)
(* -------------------------------------------------------- *)
(* We create one main service and two (POST) actions        *)
(* (for connection and disconnection)                       *)

let connect_example =
  Eliom_services.service
    ~path:["sessgrp"]
    ~get_params:unit
    ()

let connect_action =
  Eliom_services.post_coservice'
    ~name:"connection2"
    ~post_params:(string "login")
    ()

(* disconnect action and box:                               *)

let disconnect_action =
  Eliom_output.Action.register_post_coservice'
    ~name:"disconnection2"
    ~post_params:Eliom_parameters.unit
    (fun () () ->
      Eliom_state.close_session (*zap* *) ~state_name (* *zap*) ())

let disconnect_box s =
  Eliom_output.Html5.post_form disconnect_action
    (fun _ -> [p [Eliom_output.Html5.string_input
                    ~input_type:`Submit ~value:s ()]]) ()

(* The following eref is true if the connection has action failed: *)
let bad_user = Eliom_references.eref (*zap* *) ~state_name (* *zap*) ~scope:`Request false

(* -------------------------------------------------------- *)
(* new login box:                                           *)

let login_box session_expired bad_u action =
  Eliom_output.Html5.post_form action
    (fun loginname ->
      let l =
        [pcdata "login: ";
         Eliom_output.Html5.string_input ~input_type:`Text ~name:loginname ()]
      in
      [p (if bad_u
        then (pcdata "Wrong user")::(br ())::l
        else
          if session_expired
          then (pcdata "Session expired")::(br ())::l
          else l)
     ])
    ()

(* -------------------------------------------------------- *)
(* Handler for the "connect_example" service (main page):   *)

let connect_example_handler () () =
  (* The following function tests whether the session has expired: *)
  let status = Eliom_state.volatile_data_state_status (*zap* *) ~state_name (* *zap*) ()
  in
  let group =
    Eliom_state.get_volatile_data_session_group (*zap* *) ~state_name (* *zap*) ()
  in
  Eliom_references.get bad_user ~>>= fun bad_u ->
  Lwt.return
    (html
       (head (title (pcdata "")) [])
       (body
          (match group, status with
          | Some name, _ ->
              [p [pcdata ("Hello "^name); br ()];
              disconnect_box "Close session"]
          | None, Eliom_state.Expired_state ->
              [login_box true bad_u connect_action;
               p [em [pcdata "The only user is 'toto'."]]]
          | _ ->
              [login_box false bad_u connect_action;
               p [em [pcdata "The only user is 'toto'."]]]
          )))

(* -------------------------------------------------------- *)
(* Handler for connect_action (user logs in):               *)

let connect_action_handler () login =
  Eliom_state.close_session (*zap* *) ~state_name (* *zap*) () ~>>= fun () ->
  if login = "toto" (* Check user and password :-) *)
  then begin
    Eliom_state.set_volatile_data_session_group ~set_max:4 (*zap* *) ~state_name (* *zap*) login;
    Eliom_output.Redirection.send Eliom_services.void_hidden_coservice'
  end
  else  
    Eliom_references.set bad_user true ~>>= fun () ->
    Eliom_output.Action.send ()


(* -------------------------------------------------------- *)
(* Registration of main services:                           *)

let () =
  Eliom_output.Html5.register ~service:connect_example connect_example_handler;
  Eliom_output.Any.register ~service:connect_action connect_action_handler
>>
Note that in this case, we do not need a session eref any more,
because our session data was containing only the user name,
and the user name is now the session group.
(But if we need to save more data, we still need a session eref).



===Timeouts and session duration==

<<div class="wip"|Reread and verify>>
<<div class="wip"|Add timeouts for groups and processes>>
<<div class="wip"|See also timeout section in the chapter config file. may move some stuffs? verify nothing is explained twice!>>

The default timeout for sessions in one hour. Sessions will be
automatically closed after that amount of time of inactivity from the user.
You can change that value for your whole site during initialisation
using:
  
<<code language="ocaml"|Eliom_state.set_global_volatile_timeout (Some 7200.)
>>
Here 7200 seconds. <<span class="code"|None>> means no timeout.

You can change that value for your whole site after initialisation
using:
<<code language="ocaml"|Eliom_state.set_global_volatile_timeout (Some 7200.)
>>

You can change that value for one user only using:
<<code language="ocaml"|Eliom_state.set_volatile_session_timeout (Some 7200.)
>>

Note that there is also a possibility to change the default value
for Eliom in the configuration file like this:
<<code language="ocaml"|
    <extension findlib-package="ocsigen.ext.eliom">
      <volatiletimeout value="7200"/>
    </extension>
>>

<<span class="code"|value="infinity">> means no timeout.

Warning: that default may be overriden by each site using
 <<a_api| val Eliom_state.set_global_volatile_timeout >> or
 <<a_api| val Eliom_state.set_default_volatile_timeout >>.
If you want your user to be able to set the default in the
configuration file for your site (between <<span class="code"|<site>>>
and <<span class="code"|</site>>>), you must parse the configuration
( <<a_api| val Eliom_config.get_config >> function, see below).


===Cookies

Eliom references are used to store a state server side.
It is also possible to ask the browser or the client-side process
to record some piece of data and send it back to the server with each request.

This is implemented using the usual browser cookies for sessions,
and a simulation of browser cookies by Eliom client side processes.

To set or unset your own cookies on the client, use the following functions,
from module {{{Eliom_states}}}:
<<code language="ocaml"|
val set_cookie :
  ?cookie_scope:Eliom_common.cookie_scope ->
  ?path:string list ->
  ?exp:float ->
  ?secure:bool ->
  name:string -> value:string ->unit -> unit

val unset_cookie :
  ?cookie_scope:Eliom_common.cookie_scope ->
  ?path:string list ->
  name:string -> unit -> unit
>>


The <<span class="code"|?path>> argument is the path for which you want
to set/unset the cookie (relative to the main directory of your site,
defined
in the configuration file).
<<span class="code"|None>> means for all your site.

The <<span class="code"|?exp>> parameter is a the expiration date
(Unix timestamp, in seconds since the epoch).
<<span class="code"|None>> means that the cookie will expire when the browser
will be closed.

If the <<span class="code"|?secure>> argument 
is set to true (default: false) and the protocol is https, 
the server will ask the browser to send the cookie only through
secure connections.

The <<span class="code"|?cookie_scope>> argument
is {{{`Session}}} for regular browser cookies (default),
or {{{`Client_process}}} for clien process cookies
(available only if you have a client side Eliom program).

You can access the cookies sent by the browser using
 <<a_api| val Eliom_request_info.get_cookies >>.

Example:
 
<<code language="ocaml"|let cookiename = "mycookie"

let cookies = service ["cookies"] unit ()

let _ = Eliom_output.Xhtml.register cookies
  (fun () () ->
    Eliom_state.set_cookie
      ~name:cookiename ~value:(string_of_int (Random.int 100)) ();
    Lwt.return
      (html
         (head (title (pcdata "")) [])
         (body [p [pcdata (try
                             "cookie value: "^
                               (Ocsigen_lib.String_Table.find
                                  cookiename (Eliom_request_info.get_cookies ()))
                           with _ -> "<cookie not set>");
                   br ();
                   a cookies [pcdata "send other cookie"] ()]])))
>>

[[site:tuto/cookies| Try it]].


